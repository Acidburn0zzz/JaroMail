#!/usr/bin/env zsh
#
# Jaro Mail, your humble and faithful electronic postman
#
# a tool to easily and privately handle your e-mail communication
#
# Copyleft (C) 2010-2012 Denis Roio <jaromil@dyne.org>
#
# This source  code is free  software; you can redistribute  it and/or
# modify it under the terms of  the GNU Public License as published by
# the Free  Software Foundation; either  version 3 of the  License, or
# (at your option) any later version.
#
# This source code is distributed in  the hope that it will be useful,
# but  WITHOUT ANY  WARRANTY;  without even  the  implied warranty  of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# Please refer to the GNU Public License for more details.
#
# You should have received a copy of the GNU Public License along with
# this source code; if not, write to:
# Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.



# we use pinentry
# comes from gpg project and is secure
# it also conveniently uses the right toolkit
pin_entry() {
    	cat <<EOF | pinentry 2>/dev/null | awk '/^D / { sub(/^D /, ""); print }'
OPTION ttyname=$TTY
OPTION lc-ctype=$LANG
SETTITLE Type your password
SETDESC Type the password for $1 @ $2
SETPROMPT Password:
GETPIN
EOF
}


# retrieve a password for user @ domain
# put it in variable password
# up to the caller to unset it after use
ask_password() {
    func "Looking for password in keyring: $name"
    case $OS in
	MAC)
	    security find-internet-password \
		-c JARO -a $email -s $host \
		-p $transport -P $port > /dev/null
	    if [ $? != 0 ]; then # its a new password
		new_password
		{ test $? != 0 } && {
		    error "Password input aborted."
		    return 1 }
	    else
		password=`security find-internet-password -c JARO -a $email -s $host -p $transport -P $port -g 2>&1| awk '/^password:/ { print $2 }' | sed -e 's/"//g'`
	    fi
	    return 0
	    ;;
	#####################################
	GNU)
	    func "Looking for password in keyring: $name"
	    ###################
	    # USE GNOME KEYRING
	    { test $GNOMEKEY = 1 } && {
		echo "protocol=${type}\npath=jaromail/${email}\nusername=${login}\nhost=${host}\n\n" \
		    | $WORKDIR/bin/jaro-gnome-keyring check
		if [ $? != 0 ]; then # its a new password
		    new_password
		    { test $? != 0 } && {
			error "Password input aborted."
			return 1 }
		else # password found into gnome keyring
		    act "Using saved password for $1 @ $2"
		    password=`echo "protocol=${type}\npath=jaromail/${email}\nusername=${login}\nhost=${host}\n\n" | $WORKDIR/bin/jaro-gnome-keyring get`
		fi
		return 0
	    }
	    ####################
	    # USE PINENTRY ALONE
	    new_password
	    { test $? != 0 } && {
		error "Password input aborted."
		return 1 }
	    return 0
	    ;;
	*)
	    error "Unknown system, can't figure out how to handle passwords"
	    return 1
    esac
}

new_password() {
    notice "Setting a new password for $name"
    password=`pin_entry $login $host`
    res=0
    case $OS in
	MAC)
	    if [ "$password" != "" ]; then
		security add-internet-password \
		    -c JARO -a $email -s $host \
		    -p $transport -P $port -w "${password}"
		if [ $? != 0 ]; then
		    error "Error adding password to keyring."
		else
		    act "New password saved in keyring"
		fi
		return 0
	    else
		security delete-internet-password \
		    -c JARO -a $email -s $host \
		    -p $transport -P $port > /dev/null
		res=$?; unset password
		{ test $res != 0 } && {
		    error "Error deleting password from keyring."
		    return 1 }
		act "No new password given, old password erased."
		return 0
	    fi
	    ;;
	GNU)
	    if [ "$password" != "" ]; then # password was written

		# USE GNOME KEYRING
		{ test $GNOMEKEY = 1 } && {

		    cat <<EOF | $WORKDIR/bin/jaro-gnome-keyring store
protocol=${type}
path=jaromail/${email}
username=${login}
host=${host}
password=${password}
EOF
		    { test $? != 0 } && { error "Error saving password in Gnome keyring" }
		    return 0
		}

		return 0

	    else # password is blank or aborted

		# USE GNOME KEYRING
		{ test $GNOMEKEY = 1 } && {

		    cat <<EOF | $WORKDIR/bin/jaro-gnome-keyring erase
protocol=${type}
path=jaromail/${email}
username=${login}
host=${host}
EOF
		    { test $? != 0 } && {
			error "Error accessing password in Gnome keyring"
			return 1 }
		    act "No new password given, old password erased."
		    return 0
		}

		return 1

	    fi
	    ;;
	*)
	    error "Unknown system, can't figure out how to handle passwords"
	    return 1
    esac
}
