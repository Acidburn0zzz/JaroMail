#!/usr/bin/env zsh
#
# Jaro Mail, your humble and faithful electronic postman
#
# a tool to easily and privately handle your e-mail communication
#
# Copyleft (C) 2010-2012 Denis Roio <jaromil@dyne.org>
#
# This source  code is free  software; you can redistribute  it and/or
# modify it under the terms of  the GNU Public License as published by
# the Free  Software Foundation; either  version 3 of the  License, or
# (at your option) any later version.
#
# This source code is distributed in  the hope that it will be useful,
# but  WITHOUT ANY  WARRANTY;  without even  the  implied warranty  of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# Please refer to the GNU Public License for more details.
#
# You should have received a copy of the GNU Public License along with
# this source code; if not, write to:
# Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.


# checks if its a maildir
# returns 0 (success) if yes
# no in all other cases
maildircheck() {
    { test -r "$1" } || {
	error "Maildir not existing: $1"
	return 1 }
    { test -w "$1" } || {
	error "Directory not writable: $1"
	return 1 }
    { test -r "$1/cur" } \
	&& { return 0 } # Yes is a maildir
# shortened test to speedup
#	&& { test -r $1/new } \
#	&& { test -r $1/tmp } \
    func "Not a maildir: $1"
    return 1
}

maildirmake() {

    { test -z "$1" } && {
	error "internal error: missing argument for maildirmake"
	return }

    { test -r "$1" } && {
	func "directory exists: $1"
	return }

    ${=mkdir} ${1}/cur
    ${=mkdir} ${1}/new
    ${=mkdir} ${1}/tmp

}


# fills up all maildirs array
list_maildirs() {
    maildirs=()
    for m in `find $MAILDIRS -type d | awk '
    /cur$/ {next}
    /tmp$/ {next}
    /new$/ {next}
    /\/jaro\// {next}
    {print $0}'`; do
	
	{ maildircheck $m } && {
	    # is a maildir
	    { test "`find $m -type f`" != "" } && {
		# and is not empty
		maildirs+=(`basename $m`)
	    }
	}
    done
    return ${#maildirs}
}

rmdupes() {
    tmp=$TMPDIR/$datestamp.rmdupes.$RANDOM
    newlock $tmp
    for folder in ${=@}; do
	{ test -r "$folder" } || { folder=$MAILDIRS/$folder }
	{ test -r "$folder" } || {
	    error "Directory not found: $folder"
	    continue }

	{ maildircheck ${folder} } || {
	    error "Not a maildir folder: $folder"
	    continue }

	notice "Checking for duplicates in $folder"
	c=0
	for i in `find ${folder} -type f`; do
	    # 128MB should be enough ehre?
	    formail -D 128000000  $tmp <$i \
		&& rm $i && c=`expr $c + 1`
	done
    done
    unlink $tmp

    if [ "$c" = "0" ]; then
	act "No duplicates found"
    else
	act "$c duplicates found and deleted"
    fi
}

merge() {
    src=${PARAM[1]}
    dst=${PARAM[2]}

    { test "$src" = "$dst" } && {
	error "Cannot merge same directory in itself: $src = $dst"
	return 1 }

    { maildircheck $src } || {
	error "Source is not a maildir: $src"
	return 1 }

    { maildircheck $dst } || {
	error "Destination is not a maildir: $dst"
	return 1 }

    notice "Merging maildir ${src} into ${dst}"
    c=0
    for i in `find ${src}/cur -type f`; do
	mv $i ${dst}/cur/; c=$(($c + 1))
	{ test $? = 0 } || {
	    error "error moving file: $i"
	    error "merge aborted."
	    return 1 }
    done
    for i in `find ${src}/new -type f`; do
	mv $i ${dst}/new/; c=$(($c + 1))
	{ test $? = 0 } || {
	    error "error moving file: $i"
	    error "merge aborted."
	    return 1 }
    done
    for i in `find ${src}/tmp -type f`; do
	mv $i ${dst}/tmp/; c=$(($c + 1))
	{ test $? = 0 } || {
	    error "error moving file: $i"
	    error "merge aborted."
	    return 1 }
    done
    notice "$c mails succesfully moved"
    act "Removing source directory ${src}"
    ${=rm} -r ${src}
    act "Purging duplicates in destination"
    rmdupes ${dst}
    act "Done. All mails merged into ${dst}"
}

# re-sort all maildir through the procmail filters
# it can create duplicates, up to the user to rmdupes
filter() {

    update # update all filters

	# archive old procmail log
    if [ -r $WORKDIR/log/procmail.log ]; then
	newlock $WORKDIR/log/procmail-${datestamp}.log
	cat $WORKDIR/log/procmail.log \
	    >> $WORKDIR/log/procmail-${datestamp}.log
	rm -f $WORKDIR/log/procmail.log
	unlock $WORKDIR/log/procmail-${datestamp}.log
    fi

    prc=$PROCMAILDIR/rc
    { test $TMPRAM = 1 } && { # accelerate using ramdisk if present
	pdir=$TMPDIR/filter.procmail.$RAND
	cp -r $PROCMAILDIR $TMPDIR/$pdir
	prc=$TMPDIR/$pdir/rc
    }
    
    typeset -al fall
    
    for folder in ${=PARAM}; do
	{ test -r "$folder" } || { folder=$MAILDIRS/$folder }
	{ test -r "$folder" } || {
	    error "Directory not found: $folder"
	    continue }
	
	{ maildircheck ${folder} } || {
	    error "Not a maildir folder: $folder"
	    continue }

	notice "Filtering folder $folder"
	# first index current state
	for m in `find $folder -type f`; do fall+=($m); done
    done

    # then process it, this way ignoring new mails send to same folder
    act "Please wait while filtering ${#fall} maildirs..."
    for n in ${=fall}; do
	cat $n | procmail -m $prc
    done
    notice "Done filtering"
    unset fall

    total=`mailstat -k $WORKDIR/log/procmail.log | tail -n1 | awk '{print $2}'`
    briefing=`mailstat -kt $WORKDIR/log/procmail.log |awk '!/procmail/ { print "    " $2 "\t" $3 }'|sort -nr`
    echo "${briefing}"
}
