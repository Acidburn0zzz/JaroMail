#!/usr/bin/env zsh
#
# Jaro Mail, your humble and faithful electronic postman
#
# a tool to easily and privately handle your e-mail communication
#
# Copyleft (C) 2010-2012 Denis Roio <jaromil@dyne.org>
#
# This source  code is free  software; you can redistribute  it and/or
# modify it under the terms of  the GNU Public License as published by
# the Free  Software Foundation; either  version 3 of the  License, or
# (at your option) any later version.
#
# This source code is distributed in  the hope that it will be useful,
# but  WITHOUT ANY  WARRANTY;  without even  the  implied warranty  of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# Please refer to the GNU Public License for more details.
#
# You should have received a copy of the GNU Public License along with
# this source code; if not, write to:
# Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.


# checks if its a maildir
# returns 0 (success) if yes
# no in all other cases
maildircheck() {
    { test -r "$1" } || {
	error "Maildir not existing: $1"
	return 1 }
    { test -w "$1" } || {
	error "Directory not writable: $1"
	return 1 }
    { test -r "$1/cur" } \
	&& { return 0 } # Yes is a maildir
# shortened test to speedup
#	&& { test -r $1/new } \
#	&& { test -r $1/tmp } \
    func "Not a maildir: $1"
    return 1
}

maildirmake() {

    { test -z "$1" } && {
	error "internal error: missing argument for maildirmake"
	return 255 }

    { test -f "$1" } && {
	func "not a maildir, but a file: $1"
	return 254 }

    { test -d "$1/new" } && {
	func "maildir already exists: $1"
	return 0 }

    { test -r "$1" } && {
	func "directory exists, but is not a maildir: $1"
	return 254 }

    func "creating maildir: $1"

    ${=mkdir} ${1}/cur
    ${=mkdir} ${1}/new
    ${=mkdir} ${1}/tmp

    return 0
}


# fills up all maildirs array
list_maildirs() {
    maildirs=`${=find} "$MAILDIRS" -maxdepth 1 -type d`
    for m in ${(f)maildirs}; do
	func "$m"
	{ maildircheck "$m" } && {
	    # is a maildir
	    { test "`${=find} "$m" -type f`" != "" } && {
		# and is not empty
		maildirs+=(`basename "$m"`)
	    }
	}
    done
    return ${#maildirs}
}

maildirs_lastlog() {
    # returns an array of destinations maildirs touched by the last filtering operation
    # based on the procmail log format
    typeset -alU dests prio lasts
    _folders=`cat "${MAILDIRS}/logs/procmail.log"|awk '/Folder:/ {print $2}' | cut -d/ -f1`
    for d in ${(f)_folders}; do
	func "maildir touched by last operation: $d"
	# skip procmail glitch
	{ test "$d" = "procmail" } && { continue }
	# put filtered to last
	[[ ${PARAM} == *${d}* ]] && { lasts=($lasts $d); continue }
	# always give priority to known, then to priv, then the rest
	{ test "$d" = "known" } && { prio=(known $prio); continue }
	{ test "$d" = "priv" } && { prio=($prio priv); continue }
	# skip zz. trash
	[[ $d == zz.* ]] && { continue }
	# put them to filter
	    dests+=($d)
    done
    print "${=prio} ${=dests} ${=lasts}"
    unset dests
    unset prio
    unset lasts
}

rmdupes() {    

    ## special argument lastlog
    { test "$1" = "lastlog" } && {
	lastdirs=(`maildirs_lastlog`)
	act "Pruning duplicates across ${#lastdirs} destination maildirs:"
	act "${lastdirs}"
	# recursion here
	rmdupes ${=lastdirs}
	notice "Done pruning"
	# all the prioritization above is so that duplicates are spotted
	# across different maildirs and deleted from the filtered source 
	return 0
    }
    ###############

    tot=0
    typeset -al msgs
    for folder in ${=@}; do
	{ test -r "$folder" } || { folder="$MAILDIRS/$folder" }
	{ test -r "$folder" } || {
	    error "Directory not found: $folder"
	    continue }

	{ maildircheck "${folder}" } || {
	    error "Not a maildir folder: $folder"
	    continue }

	c=0
	notice "Checking for duplicates in folder: `basename $folder`"
	msgs=()
	for m in `${=find} "${folder}" -type f`; do
	    msgs+=("$m")
	done
	act "${#msgs} messages to check"
	for m in ${=msgs}; do
	    # 128MB should be enough ehre?
	    formail -D 128000000  $formail_cache <"$m" \
		&& rm "$m" && c=$(( $c + 1 ))
	done
	act "$c duplicates found and deleted"
	tot=$(( $tot + $c ))
    done

    if [ "$tot" = "0" ]; then
	act "No duplicates found at all"
    else
	act "$tot total duplicates found and deleted"
    fi
}

merge() {
    src=${1}
    dst=${2}

    { test "$src" = "$dst" } && {
	error "Cannot merge same directory in itself: $src = $dst"
	return 1 }

    { maildircheck "$src" } || {
	error "Source is not a maildir: $src"
	return 1 }

    { maildircheck "$dst" } || {
	error "Destination is not a maildir: $dst"
	return 1 }

    notice "Merging maildir ${src} into ${dst}"
    c=0
    fr=`${=find} ${src}/cur -type f`
    for i in ${(f)fr}; do
	mv "$i" "${dst}/cur/"; c=$(($c + 1))
	{ test $? = 0 } || {
	    error "error moving file: $i"
	    error "merge aborted."
	    return 1 }
    done
    fr=`${=find} ${src}/new -type f`
    for i in ${(f)fr}; do
	mv "$i" "${dst}/new/"; c=$(($c + 1))
	{ test $? = 0 } || {
	    error "error moving file: $i"
	    error "merge aborted."
	    return 1 }
    done
    fr=`${=find} ${src}/tmp -type f`
    for i in ${(f)fr}; do
	mv "$i" "${dst}/tmp/"; c=$(($c + 1))
	{ test $? = 0 } || {
	    error "error moving file: $i"
	    error "merge aborted."
	    return 1 }
    done
    notice "$c mails succesfully moved"
    act "Removing source directory ${src}"
    ${=rm} -r "${src}"
    act "Purging duplicates in destination"
    formail_cache="$TMPDIR/filter.rmdupes.$datestamp.$RANDOM"
    newlock "$formail_cache"
    rmdupes "${dst}"
    unlock "$formail_cache"
    act "Done. All mails merged into ${dst}"
}

# re-sort all maildir through the procmail filters
# it can create duplicates, up to the user to rmdupes
filter() {

    update # update all filters

	# archive old procmail log
    { test -r "$MAILDIRS/logs/procmail.log" } && {
	newlock "$MAILDIRS/logs/procmail-${datestamp}.log"
	cat "$MAILDIRS/logs/procmail.log" \
	    >> "$MAILDIRS/logs/procmail-${datestamp}.log"
	${=rm} "$MAILDIRS/logs/procmail.log"
	unlock "$MAILDIRS/logs/procmail-${datestamp}.log"
    }

    prc="$PROCMAILDIR/rc"
    
    typeset -al fall
    
    for folder in ${=PARAM}; do
	{ test -r "$folder" } || { folder="$MAILDIRS/$folder" }
	{ test -r "$folder" } || {
	    error "Directory not found: $folder"
	    continue }
	
	{ maildircheck "$folder" } || {
	    error "Not a maildir folder: $folder"
	    continue }

	notice "Filtering folder $folder"
	# first index current state
	for m in `${=find} "$folder" -type f`; do fall+=("$m"); done
    done

    { test ${#fall} = 0 } && {
	error "No messages to filter, operation aborted."
	return 1
    }

    # then process it, this way ignoring new mails send to same folder
    act "Filtering ${#fall} messages..."
    for n in ${=fall}; do
	cat "$n" | procmail -m "$prc"
    done
    notice "Done filtering"
    unset fall


    total=`mailstat -k "$MAILDIRS/logs/procmail.log" | tail -n1 | awk '{print $2}'`
    briefing=`mailstat -kt "$MAILDIRS/logs/procmail.log" |awk '!/procmail/ { print "    " $2 "\t" $3 }'|sort -nr`
    echo "${briefing}"


    formail_cache="$TMPDIR/filter.rmdupes.$datestamp.$RANDOM"
    newlock "$formail_cache"

    # prunes out all duplicates from last filtered mails,
    rmdupes lastlog

    unlink "$formail_cache"
}
