#!/usr/bin/env zsh
#
# Jaro Mail, your humble and faithful electronic postman
#
# a tool to easily and privately handle your e-mail communication
#
# Copyleft (C) 2010-2012 Denis Roio <jaromil@dyne.org>
#
# This source  code is free  software; you can redistribute  it and/or
# modify it under the terms of  the GNU Public License as published by
# the Free  Software Foundation; either  version 3 of the  License, or
# (at your option) any later version.
#
# This source code is distributed in  the hope that it will be useful,
# but  WITHOUT ANY  WARRANTY;  without even  the  implied warranty  of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# Please refer to the GNU Public License for more details.
#
# You should have received a copy of the GNU Public License along with
# this source code; if not, write to:
# Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

queue() {
    local base;
    local tmp;
    local mailfile;
    local msmtpfile;

    # add mails to the sendout queue
    ${=mkdir} $MAILDIRS/outbox
    cd $MAILDIRS/outbox || return 1
    notice "Adding mail to the outbox queue"
    # Create new unique filenames of the form
    # MAILFILE:  ccyy-mm-dd-hh.mm.ss[-x].mail
    # MSMTPFILE: ccyy-mm-dd-hh.mm.ss[-x].msmtp
    # where x is a consecutive number only appended if you send more than one
    # mail per second.
    base="`date +%Y-%m-%d-%H.%M.%S`"
    func "[$base] queue called with params: ${PARAM[@]}"

    if [ -f "$base.mail" -o -f "$base.msmtp" ]; then
	tmp="$base"
	i=1
	while [ -f "$tmp-$i.mail" -o -f "$tmp-$i.msmtp" ]; do
		i=`expr $i + 1`
	done
	base="$base-$i"
    fi
    mailfile="$base.mail"
    msmtpfile="$base.msmtp"
    # Write command line to $MSMTPFILE
    echo "$@" > "$msmtpfile"
    lock $msmtpfile
    # Write the mail to $MAILFILE
    cat > "$mailfile"
    unlock $msmtpfile
    cd -
    return 0
}

###########
# FETCHMAIL
fetchall() {
    notice "Fetching all accounts in $MAILDIRS"
    res=0
    for i in `find $WORKDIR/Accounts -type f | grep -v README`; do
	account=`basename $i`
	type=`echo $account | cut -d. -f1`
	func "fetchall: $account type $type"
	fetch $account.$type
	if [ $? != 0 ]; then res=1; fi
	# returns an error if just one of the accounts did
    done
    return $res
}
fetch() {
    adir=$WORKDIR/Accounts

    typeset -al all

    # argument is account type.name
    { test $1 } && {
	type=`echo $1 | cut -d. -f1`
	account=`echo $1 | cut -d. -f2`
	func "fetch type $type account $account"
    }
    # recursion here
    { test $account = default } && { fetchall; return $? }

    read_account $type

    if [ $? != 0 ]; then
	error "Account configuration not found, or broken. Aborting operation."
	return 1
    fi

    if [ "$type" = "smtp" ]; then # we skip smtp in fetch
	return 0; fi

    if ! [ -r $PROCMAILDIR/rc ]; then
	act "updating procmail configuration"
	update
    fi

    notice "Fetching mails for $name"
    ask_password $login $host
    { test $? != 0 } && {
	error "Error retrieving password for $login on $host"
	unset password all; return 1
    }

    tmp=$TMPDIR/$host.fetch.$RANDOM
    newlock $tmp
    cat <<EOF > $tmp
poll $host with proto IMAP user "$login" there with password "$password"
EOF
    unset password

    if ! [ -z $accountopt ]; then # add option configuration
	echo "${accountopt}" >> $tmp; fi

    if ! [ -z $folders ]; then # add folder configuration
	echo "folder ${folders}" >> $tmp; fi

    cat <<EOF >> $tmp
ssl warnings 3600 and wants mda "procmail -m $PROCMAILDIR/rc"
EOF
    if [ "$cert" = "check" ]; then
	cat <<EOF >> $tmp
sslcertck sslcertpath '$WORKDIR/certs'
EOF
    fi
    cat <<EOF >> $tmp
antispam 571 550 501 554
EOF

	# try login without doing anything
    fetchmail -c -f $tmp
	# examine result
    case $? in
	1)
	    notice "No mails for $name"
	    unlink $tmp
	    return 1
		;;
	2)
	    error "Invalid or unknown certificate for $host"
	    unlink $tmp
	    return 1
	    ;;
	3)
	    error "Invalid password for user $login at $host"
	    unlink $tmp
	    return 1
	    ;;
	*) ;;
    esac

	# archive old procmail log
    if [ -r $WORKDIR/log/procmail.log ]; then
	newlock $WORKDIR/log/procmail-${datestamp}.log
	cat $WORKDIR/log/procmail.log \
	    >> $WORKDIR/log/procmail-${datestamp}.log
	rm -f $WORKDIR/log/procmail.log
	unlock $WORKDIR/log/procmail-${datestamp}.log
    fi
    act "please wait while downloading mails..."

    cat $tmp | fetchmail -f $tmp
	# TODO: substitute this with cat conf | fetchmail -f -
	# to avoid writing the password in clear on filesystem

    unlink $tmp

    total=`mailstat -k $WORKDIR/log/procmail.log | tail -n1 | awk '{print $2}'`
    briefing=`mailstat -kt $WORKDIR/log/procmail.log |awk '!/procmail/ { print "    " $2 "\t" $3 }'|sort -nr`
    notice "$total emails fetched"
    echo "${briefing}"

    return 0
}


######
# SEND
# this function should send all mails in outbox
send() {
    adir=$WORKDIR/Accounts
    typeset -al all

    # list mails to send
    mailnum=`ls ${MAILDIRS}/outbox | grep 'mail$' | wc -l`
    mailnum=${mailnum// /} # trim whitespace
    if [ "$mailnum" = "0" ]; then
	act "Outbox is empty, no mails to send."
	return 0
    fi

    read_account smtp
    if [ $? != 0 ]; then
	error "Account configuration not found, or broken. Aborting operation."
	return 1
    fi

    notice "Sending out ${mailnum} mails via $name"

    # defaults
    [ -z $auth ] && auth=plain
    [ -z $port ] && port=25


    ask_password $login $host
    { test $? != 0 } && {
	error "Error retrieving password for $login on $host"
	unset password all; return 1
    }

    tmp=$TMPDIR/$host.send.$RANDOM
    newlock $tmp
    cat <<EOF > $tmp
account default
from ${email}
user ${login}
host ${host}
port ${port}
tls on
tls_starttls on
tls_certcheck off
logfile ${WORKDIR}/log/msmtp.log
auth ${auth}
password ${password}
EOF
    unset password

    for mail in `find $MAILDIRS/outbox -name "*.mail"`; do
       smtp=`echo ${mail} | sed -e 's/mail/msmtp/'`
       lock ${smtp}
       recipients="`cat ${smtp}`"
       act "To: ${recipients}"
       msmtp -C $tmp -- ${=recipients} < "${mail}"
       if [ $? != 0 ]; then
	   error "Error sending mail, skipped"
	   unlock ${smtp}
       else
	   act "Mail sent succesfully"
	   # whitelist those to whom we send mails
	   cat ${mail} | $WORKDIR/bin/jaro -l whitelist -q learn to:
	   ${=rm} ${mail} &
	   unlink ${smtp} &
       fi
    done
    unlink $tmp
    return 0
}

######
# PEEK
# this function will open the MTA to the imap server without fetching mails locally
peek() {
    read_account imap
    if [ $? != 0 ]; then
	error "Account configuration not found, or broken. Aborting operation."
	return 1
    fi

    notice "Peek into remote imap account $name"

    folder=""
    if ! [ -z ${1} ]; then
	folder="/${1}"
	act "opening folder ${folder}"
    fi

    switch_identity
    case $transport in
	ssl) act "using secure connection (SSL)"
	    iproto="imaps" ;;
	plain) act "using clear text connection"
	    iproto="imap"  ;;
    esac
    # escape at sign in login
    ilogin=`echo $login | sed 's/@/\\@/'`

    ask_password $login $host
    { test $? != 0 } && {
	error "Error retrieving password for $login on $host"
	unset password all; return 1
    }
    tmp=$TMPDIR/$host.peek.$RANDOM
    newlock $tmp
    cat <<EOF >> $tmp
set imap_pass = "${password}"
# set imap_peek = yes
EOF
    unset password
    echo "source $tmp" >> $MUTTDIR/password
    (sleep 1;
	cp /dev/null $MUTTDIR/password
	cp /dev/null $tmp
	unlink $tmp
    ) &
    mutt -F $MUTTDIR/rc	-f ${iproto}://${ilogin}@${host}${folder}
    return $?
}
