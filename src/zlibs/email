#!/usr/bin/env zsh
#
# Jaro Mail, your humble and faithful electronic postman
#
# a tool to easily and privately handle your e-mail communication
#
# Copyleft (C) 2010-2012 Denis Roio <jaromil@dyne.org>
#
# This source  code is free  software; you can redistribute  it and/or
# modify it under the terms of  the GNU Public License as published by
# the Free  Software Foundation; either  version 3 of the  License, or
# (at your option) any later version.
#
# This source code is distributed in  the hope that it will be useful,
# but  WITHOUT ANY  WARRANTY;  without even  the  implied warranty  of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# Please refer to the GNU Public License for more details.
#
# You should have received a copy of the GNU Public License along with
# this source code; if not, write to:
# Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

# extract all emails found in stdin, one per line
extract_emails() {
awk '{ for (i=1;i<=NF;i++)
	 if ( $i ~ /[[:alnum:]]@[[:alnum:]]/ ) {
	   gsub(/<|>|,/ , "" , $i); print $i } }'
}

compose() {
    # no args, open in compose mode
    tmp="${TMPDIR}/compose.$datestamp.$RANDOM"
    _res=0;
    echo "To: ${PARAM[@]}" > $tmp
    ${=mutt} -F $MUTTDIR/rc -H $tmp
    _res=$?
    rm -f $tmp
    return $_res
}


queue() {
    local base;

    notice "Adding mail to the outbox queue"
    base="`hostname`-queue-`date +%Y-%m-%d-%H.%M.%S`"

    queue_to=($@)
    # set it ready for saving in outbux
    queue_body="$base"

    # pre-processing of the email headers
    cat | awk '
/User-Agent:/ { print "User-Agent: Jaro Mail <http://jaromail.dyne.org>"; next }
{ print $0 }
' > "$TMPDIR/${queue_body}.mail"

    maildirmake $MAILDIRS/outbox
    { test $? = 0 } || {
	act "updating outbox format to Maildir"
    # silently migrate the outbox from the old format to the new
	tmpp=(`find $MAILDIRS/outbox -type f`)
	if [ ${#tmpp} = 0 ]; then
	    # the old format outbox is just empty
	    rmdir $MAILDIRS/outbox
	    maildirmake $MAILDIRS/outbox
	else
	    # there are some mails to be sent in the old format outbox
	    # preserve them while migrating to the new format
	    # this code is less interesting, since it handles an old
	    # format in JaroMail
	    tmppp=$TMPDIR/jaro-outbox-migration-$RANDOM
	    mkdir -p $tmppp
	    mv $MAILDIRS/outbox/* $tmppp/
	    rmdir $MAILDIRS/outbox
	    maildirmake $MAILDIRS/outbox
	    mkdir -p $MAILDIRS/outbox/send
	    # here we devince two useful arrays:
	    # bodies: the list of mail bodies to send
	    # corresponding to files with same name and extension .msmtp
	    bodies=(`find $tmppp -type f -name '*.mail'`)
	    for i in ${bodies}; do mv $i $MAILDIRS/outbox/new/; done
	    rmdir $tmppp
	fi
    }
    ${=mkdir} $MAILDIRS/outbox/send

    lock $MAILDIRS/outbox

    # check if recipients are a Group
    if [[ "${=queue_to}" =~ '@jaromail.group' ]]; then


	groupfile="`print ${=queue_to}|cut -d@ -f1`"
	act "email recipients are in group ${groupfile}"

	{ test -r $MAILDIRS/Groups/$groupfile } || {
	    maildirmake $MAILDIRS/postponed
	    mv ${TMPDIR}/${queue_body}.mail $MAILDIRS/postponed/new
	    unlock $MAILDIRS/outbox
	    error "Group not found: $groupfile"
	    return 1 }

	recipients=`cat $MAILDIRS/Groups/$groupfile | grep -v '^#'`
	groupnum="`print ${recipients} | wc -l`"
	groupmode="`head -n1 $MAILDIRS/Groups/$groupfile | awk '/^#mode/ { print $2 } { next }'`"
	{ test "$groupmode" = "" } && { groupmode="individual" }
	act "$groupnum recipients in total, sending mode $groupmode"


	case $groupmode in

	    # individual group mode hides other recipients and send
	    # multiple mail envelopes with each single recipient in To:
	    individual)
		for i in ${(f)recipients}; do
		    ig=${base}-${RANDOM}
		    cat "${TMPDIR}/${queue_body}.mail" | \
			awk '/^To:/ { print "'"To: $i"'"; next } { print $0 }' \
			> ${MAILDIRS}/outbox/new/${ig}.mail
		done
		;;

	    # carboncopy group mode sends a single envelope where all
	    # recipients can see and reply to each other
	    carboncopy|cc)
		cc=""
		for i in ${(f)recipients}; do
		    if [ "$cc" = "" ]; then cc="$i"
		    else cc+=", $i"; fi
		done
		ig=${base}-${RANDOM}
		cat "${TMPDIR}/${queue_body}.mail" | \
		    awk '/^To:/ { print "'"To: $cc"'"; print "'"Reply-To: $cc"'"; next }
				{ print $0 }' \
				    > ${MAILDIRS}/outbox/new/${ig}.mail
		;;
	esac

    else
	# recipients are set in the email envelope
	mv $TMPDIR/$queue_body.mail $MAILDIRS/outbox/new/$queue_body.mail
    fi

    unlock $MAILDIRS/outbox
    { test -r ${TMPDIR}/${queue_body}.mail } && {
	${=rm} ${TMPDIR}/${queue_body}.mail }

}

###########
# FETCHMAIL
fetchall() {
    notice "Fetching all accounts in $MAILDIRS"
    res=0
    for i in `${=find} $WORKDIR/Accounts -type f | grep -v README`; do
	account=`basename $i`
	account_type="${account[(ws:.:)1]}"
	account="${account[(ws:.:)2]}"
	fetch
	if [ $? != 0 ]; then res=1; fi
	# returns an error if just one of the accounts did
    done
    return $res
}

fetch() {
    { test "$account" = "" } && {
	fetchall; return $? }

# setup global account variables
    read_account ${account_type} ${account}
# name login host protocol port auth folders accountopt

    { test  $? != 0 } && {
	error "Error on account entry: $account_type $account"
	return 1
    }

    # fetch works with imap and pop, skip smtp
    { test "$account_type" = "smtp" } && { return 0 }

    if ! [ -r $PROCMAILDIR/rc ]; then
	act "updating procmail configuration"
	{ test $DRYRUN != 1 } && { update }
    fi

    notice "Connecting account ${account} via ${account_type}"

    is_online ${host} ${port}
    { test $? = 0 } || { return 1 }

    ask_password $login $host
    { test $? = 0 } || { error "Impossible to fetch ${account_type} account ${account}"; return 1 }

    # this puts total size in $imap_info
    # experimental only, commented out for now
    # get_imap_info

    # return here if the imap folders are all empty
    # { test ${imap_info[${#imap_info}]} = 0 } && {
    #	act "Mailbox is empty, nothing to fetch."
    #	return 0 }

    # notice "Total occupation is `human_size ${imap_info[${#imap_info}]}`"

    { test $DRYRUN != 1 } && {

	fmconf=("poll $host with proto IMAP user \"$login\" there with password \"$password\"")

	unset password

	if ! [ -z $accountopt ]; then # add option configuration
	    fmconf+=(" ${accountopt} "); fi

	if ! [ -z $folders ]; then # add folder configuration
	    fmconf+=(" folder ${folders} "); fi

	fmconf+=(" ssl warnings 3600 and wants mda \"procmail -m $PROCMAILDIR/rc\" ")

	if [ "$cert" = "check" ]; then
	    # we now use system-wide certs
	    fmconf+=(" sslcertck ") # sslcertpath '$WORKDIR/certs'
	fi


	fmconf+=(" antispam 571 550 501 554 ")

	print $accountopt | grep 'keep' > /dev/null
	{ test $? = 0 } || {
	   error "planning to delete mails from server, account option: $accountopt" }

	# try login without doing anything
	print "$fmconf" | fetchmail -c -f -
	res=$?
	# examine result
	case $ret in
	    1)
		notice "No mails for $name"
		unset $fmconf
		return 1
		;;
	    2)
		error "Invalid or unknown certificate for $host"
		unset $fmconf
		return 1
		;;
	    3)
		error "Invalid password for user $login at $host"
		unset $fmconf
		return 1
		;;
	    *)
		func "fetchmail returns $ret" ;;
	esac

	# archive old procmail log
	if [ -r $MAILDIRS/logs/procmail.log ]; then
	    newlock $MAILDIRS/logs/procmail-${datestamp}.log
	    cat $MAILDIRS/logs/procmail.log \
		>> $MAILDIRS/logs/procmail-${datestamp}.log
	    rm -f $MAILDIRS/logs/procmail.log
	    unlock $MAILDIRS/logs/procmail-${datestamp}.log
	fi

	act "please wait while downloading mails..."

	print " $fmconf " | fetchmail -f -

	unset $fmconf



	total=`mailstat -k $MAILDIRS/logs/procmail.log | tail -n1 | awk '{print $2}'`
	briefing=`mailstat -kt $MAILDIRS/logs/procmail.log |awk '!/procmail/ { print "    " $2 "\t" $3 }'|sort -nr`
	notice "$total emails fetched"
	print "${briefing}"

    } # DRYRUN

    return 0
}


######
# SEND
# this function should send all mails in outbox
send() {
    adir=$WORKDIR/Accounts
    typeset -al all


    # list mails to send
    queue_outbox=(`${=find} ${MAILDIRS}/outbox -type f -name '*.mail'`)
    { test ${#queue_outbox} = 0 } && {
	act "Outbox is empty, no mails to send."
	return 0 }

    read_account smtp ${account}
    { test  $? != 0 } && {
	error "Account configuration not found, or broken. Aborting operation."
	return 1
    }

    # defaults
    { test -z $auth } && { auth=plain }
    { test -z $port } && { port=25 }

    is_online ${host} ${port}
    { test $? = 0 } || { return 1 }

    notice "Sending out ${#queue_outbox} mails via ${type}.${account}"


    { test $DRYRUN = 1 } && { return 0 }

    # from here on we must unlock on error
    lock ${MAILDIRS}/outbox

    ask_password $login $host
    { test $? = 0 } || {
	error "Error retrieving password for $login on $host"
	unset password all
	unlock ${MAILDIRS}/outbox
	return 1 }

    tmp=$TMPDIR/msmtp.$host.$datestamp.$RANDOM
    newlock $tmp
    cat <<EOF > $tmp
account default
from ${email}
user ${login}
host ${host}
port ${port}
tls on
tls_starttls on
tls_certcheck off
logfile ${MAILDIRS}/logs/msmtp.log
auth ${auth}
password ${password}
EOF

    for qbody in ${queue_outbox}; do

	# check if this is an anonymous mail
	head -n 20 "$qbody" | grep -i '^from: anon' > /dev/null
	if [ $? = 0 ]; then
	    anoncfg="${TMPDIR}/${host}.anon.$RANDOM"
	    cat <<EOF > "$anoncfg"
REMAIL		n
POOLSIZE	0
SENDPOOLTIME	0m
RATE		100

PGPREMPUBASC	/var/lib/mixmaster/used-stats/pubring.asc
PUBRING		/var/lib/mixmaster/used-stats/pubring.mix
TYPE1LIST	/var/lib/mixmaster/used-stats/rlist.txt
TYPE2REL	/var/lib/mixmaster/used-stats/mlist.txt
TYPE2LIST	/var/lib/mixmaster/used-stats/type2.list

SENDMAIL=msmtp -C $tmp -t
ERRLOG=${MAILDIRS}/logs/mixmaster.log
VERBOSE=2

EOF

	    act "Sending out anonymous email via mixmaster"
	    act "`head -n 20 $qbody | grep '^Subject:'`"
	    recipients=(`cat $qbody | fetchaddr -a -x to | cut -d, -f1`)
	    recipients+=(`cat $qbody | fetchaddr -a -x cc | cut -d, -f1`)
	    for r in ${recipients}; do
		act "Sending to: ${r}"
		# strip headers and send via mixmaster
		cat  "$qbody" | awk '
BEGIN { head=1 }
/^To: /           { print $0; next }
/^Cc: /           { print $0; next }
/^Bcc: /          { print $0; next }
/^Subject: /      { print $0; next }
/^In-Reply-To: /  { print $0; next }
/^References: /   { print $0; next }
/^Mime-Version: / { print $0; next }
/^Content-Type: / { print $0; next }
/^Content-Disposition: / { print $0; next }
/^$/ { head=0 }
{ if(head==0) print $0 }
' | mixmaster --config=$anoncfg -m --to="$r"
		res=$?
		func "mixmaster returns $res"
	    done

	    ${=rm} $anoncfg

	else # normal send with msmtp

	    act "Sending out email"
	    head -n 10 "$qbody" | awk '
/^From:/ { print " .  " $0 }
/^To:/   { print " .  " $0 }
/^Cc:/   { print " .  " $0 }
/^Subject:/ { print " .  " $0 }
'
	    msmtp -C $tmp -t < "${qbody}"
	    res=$?

	fi

	# evaluate results
	if [ "$res" != "0" ]; then
	    error "Error sending mail, skipped"
	else
	    notice "Mail sent succesfully"
	    # whitelist those to whom we send mails
	    cat "$qbody" | $WORKDIR/bin/jaro -q learn recipient
	    mv "$qbody" $MAILDIRS/sent/new/
	fi

    done

    unset password
    unlock $MAILDIRS/outbox
    unlock $tmp
    ${=rm} $tmp

    return 0
}

######
# PEEK
# this function will open the MTA to the imap server without fetching mails locally
peek() {
    read_account imap ${account}
    { test  $? != 0 } && {
	error "Account configuration not found, or broken. Aborting operation."
	return 1
    }

    is_online ${host} ${port}
    { test $? = 0 } || { return 1 }

    notice "Peek into remote imap account $name"

    folder=""
    if ! [ -z ${1} ]; then
	folder="/${1}"
	act "opening folder ${folder}"
    fi

    switch_identity
    case $transport in
	ssl|tls) act "using secure connection (SSL)"
	    iproto="imaps" ;;
	plain) act "using clear text connection"
	    iproto="imap"  ;;
	*)
	    error "Unknown transport: $transport"
	    error "Configuration error in imap account ${account}"
	    return 1 ;;
    esac
    # escape at sign in login
    ilogin=`print $login | sed 's/@/\\@/'`

    { test $DRYRUN != 1 } && {

	ask_password $login $host
	{ test $? != 0 } && {
	    error "Error retrieving password for $login on $host"
	    unset password all; return 1
	}
	tmp=$TMPDIR/$host.peek.$RANDOM
	newlock $tmp
	cat <<EOF >> $tmp
set imap_pass = "${password}"
# set imap_peek = yes
EOF
	unset password
	print "source '$tmp'" > $TMPDIR/muttpass
	# when peeking don't mark unread messages as Old
	# and sort date received with no threading (latest up)
	cat <<EOF >> $TMPDIR/muttpass
unset mark_old
set sort=reverse-date-received
EOF
	(sleep 1;
	    cp /dev/null $TMPDIR/muttpass
	    unlink $tmp # secure delete in ram
	) &
	${=mutt} -F $MUTTDIR/rc	-f ${iproto}://${ilogin}@${host}${folder}

    } # DRYRUN
    return $?
}

later() {
    func "Saving message from stdin into remember"
    filename=$USER.${hostname}.$datestamp.$RANDOM
    # hostname was set by the main jaro routine
    func "Filename: $filename"

    { maildircheck ${MAILDIRS}/remember } || { maildirmake ${MAILDIRS}/remember }
    cat > ${MAILDIRS}/remember/new/$filename
}
