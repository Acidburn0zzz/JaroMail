#!/usr/bin/env zsh
#
# Jaro Mail, your humble and faithful electronic postman
#
# a tool to easily and privately handle your e-mail communication
#
# Copyleft (C) 2010-2012 Denis Roio <jaromil@dyne.org>
#
# This source  code is free  software; you can redistribute  it and/or
# modify it under the terms of  the GNU Public License as published by
# the Free  Software Foundation; either  version 3 of the  License, or
# (at your option) any later version.
#
# This source code is distributed in  the hope that it will be useful,
# but  WITHOUT ANY  WARRANTY;  without even  the  implied warranty  of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# Please refer to the GNU Public License for more details.
#
# You should have received a copy of the GNU Public License along with
# this source code; if not, write to:
# Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

compose() {
    # no args, open in compose mode
    tmp="${WORKDIR}/tmp/compose.$datestamp.$RANDOM"
    _res=0;
    echo "To: ${PARAM[@]}" > $tmp
    ${=mutt} -F $MUTTDIR/rc -H $tmp
    _res=$?
    rm -f $tmp
    return $_res
}

queue() {
    local base;
    local tmp;
    local mailfile;
    local msmtpfile;

    # add mails to the sendout queue
    ${=mkdir} $MAILDIRS/outbox
    pushd $MAILDIRS/outbox
    notice "Adding mail to the outbox queue"
    # Create new unique filenames of the form
    # MAILFILE:  ccyy-mm-dd-hh.mm.ss[-x].mail
    # MSMTPFILE: ccyy-mm-dd-hh.mm.ss[-x].msmtp
    # where x is a consecutive number only appended if you send more than one
    # mail per second.
    base="`date +%Y-%m-%d-%H.%M.%S`"
    func "[$base] queue called with params: ${PARAM[@]}"

    if [ -f "$base.mail" -o -f "$base.msmtp" ]; then
	tmp="$base"
	i=1
	while [ -f "$tmp-$i.mail" -o -f "$tmp-$i.msmtp" ]; do
		i=`expr $i + 1`
	done
	base="$base-$i"
    fi
    mailfile="$base.mail"
    msmtpfile="$base.msmtp"
    # Write command line to $MSMTPFILE
    print "$@" > "$msmtpfile"
    lock $msmtpfile
    # Write the mail to $MAILFILE
    cat > "$mailfile"
    unlock $msmtpfile
    popd
    return 0
}

###########
# FETCHMAIL
fetchall() {
    notice "Fetching all accounts in $MAILDIRS"
    res=0
    for i in `${=find} $WORKDIR/Accounts -type f | grep -v README`; do
	account=`basename $i`
	account_type="${account[(ws:.:)1]}"
	account="${account[(ws:.:)2]}"
	fetch
	if [ $? != 0 ]; then res=1; fi
	# returns an error if just one of the accounts did
    done
    return $res
}

fetch() {
    { test "$account" = "" } && {
	fetchall; return $? }

# setup global account variables
    read_account ${account_type} ${account}
# name login host protocol port auth folders accountopt

    { test  $? != 0 } && {
	error "Error on account entry: $account_type $account"
	return 1
    }

    # fetch works with imap and pop, skip smtp
    { test "$account_type" = "smtp" } && { return 0 }

    if ! [ -r $PROCMAILDIR/rc ]; then
	act "updating procmail configuration"
	{ test $DRYRUN != 1 } && { update }
    fi

    notice "Examining mailbox for $name <$email> on $host"

    is_online ${host} ${port}
    { test $? = 0 } || { return 1 }

    ask_password $login $host

    # this puts total size in $imap_info
    # experimental only, commented out for now
    # get_imap_info

    # return here if the imap folders are all empty
    # { test ${imap_info[${#imap_info}]} = 0 } && {
    # 	act "Mailbox is empty, nothing to fetch."
    # 	return 0 }

    # notice "Total occupation is `human_size ${imap_info[${#imap_info}]}`"

    { test $DRYRUN != 1 } && {

	fmconf=("poll $host with proto IMAP user \"$login\" there with password \"$password\"")

	unset password

	if ! [ -z $accountopt ]; then # add option configuration
	    fmconf+=(" ${accountopt} "); fi

	if ! [ -z $folders ]; then # add folder configuration
	    fmconf+=(" folder ${folders} "); fi

	fmconf+=(" ssl warnings 3600 and wants mda \"procmail -m $PROCMAILDIR/rc\" ")

	if [ "$cert" = "check" ]; then
	    fmconf+=(" sslcertck sslcertpath '$WORKDIR/certs' ")
	fi

	
	fmconf+=(" antispam 571 550 501 554 ")


	# try login without doing anything
	print "$fmconf" | fetchmail -c -f -
	res=$?
	# examine result
	case $ret in
	    1)
		notice "No mails for $name"
		unset $fmconf
		return 1
		;;
	    2)
		error "Invalid or unknown certificate for $host"
		unset $fmconf
		return 1
		;;
	    3)
		error "Invalid password for user $login at $host"
		unset $fmconf
		return 1
		;;
	    *) 
		func "fetchmail returns $ret" ;;
	esac

	# archive old procmail log
	if [ -r $WORKDIR/log/procmail.log ]; then
	    newlock $WORKDIR/log/procmail-${datestamp}.log
	    cat $WORKDIR/log/procmail.log \
		>> $WORKDIR/log/procmail-${datestamp}.log
	    rm -f $WORKDIR/log/procmail.log
	    unlock $WORKDIR/log/procmail-${datestamp}.log
	fi

	# copy addressbook in RAM for speedup
	newlock $addressbook_tmp
	cp $WORKDIR/addressbook $addressbook_tmp

	act "please wait while downloading mails..."

	print " $fmconf " | fetchmail -f -

	unset $fmconf

	unlink $addressbook_tmp

	total=`mailstat -k $WORKDIR/log/procmail.log | tail -n1 | awk '{print $2}'`
	briefing=`mailstat -kt $WORKDIR/log/procmail.log |awk '!/procmail/ { print "    " $2 "\t" $3 }'|sort -nr`
	notice "$total emails fetched"
	print "${briefing}"

    } # DRYRUN

    return 0
}


######
# SEND
# this function should send all mails in outbox
send() {
    adir=$WORKDIR/Accounts
    typeset -al all

    # list mails to send
    mailnum=`ls ${MAILDIRS}/outbox | grep 'mail$' | wc -l`
    mailnum=${mailnum// /} # trim whitespace
    if [ "$mailnum" = "0" ]; then
	act "Outbox is empty, no mails to send."
	return 0
    fi

    read_account smtp ${account}
    { test  $? != 0 } && {
	error "Account configuration not found, or broken. Aborting operation."
	return 1
    }

    # defaults
    { test -z $auth } && { auth=plain }
    { test -z $port } && { port=25 }

    is_online ${host} ${port}
    { test $? = 0 } || { return 1 }

    notice "Sending out ${mailnum} mails via ${type}.${account}"


    { test $DRYRUN != 1 } && {
	ask_password $login $host
	{ test $? != 0 } && {
	    error "Error retrieving password for $login on $host"
	    unset password all; return 1
	}

	tmp=$TMPDIR/msmtp.$host.$datestamp.$RANDOM
	newlock $tmp
	cat <<EOF > $tmp
account default
from ${email}
user ${login}
host ${host}
port ${port}
tls on
tls_starttls on
tls_certcheck off
logfile ${WORKDIR}/log/msmtp.log
auth ${auth}
password ${password}
EOF
	unset password

	for mail in `${=find} $MAILDIRS/outbox -name "*.mail"`; do
	    smtp=`print ${mail} | sed -e 's/mail/msmtp/'`
	    lock ${smtp}
	    recipients="`cat ${smtp}`"
	    act "To: ${recipients}"
	    msmtp -C $tmp -- ${=recipients} < "${mail}"
	    if [ $? != 0 ]; then
		error "Error sending mail, skipped"
		unlock ${smtp}
	    else
		act "Mail sent succesfully"
	   # whitelist those to whom we send mails
		cat ${mail} | $WORKDIR/bin/jaro -q learn recipient
		unlink ${smtp}
		${=rm} ${mail}
	    fi
	done
	unlink $tmp
    } # DRYRUN
    return 0
}

######
# PEEK
# this function will open the MTA to the imap server without fetching mails locally
peek() {
    read_account imap ${account}
    { test  $? != 0 } && {
	error "Account configuration not found, or broken. Aborting operation."
	return 1
    }

    is_online ${host} ${port}
    { test $? = 0 } || { return 1 }

    notice "Peek into remote imap account $name"

    folder=""
    if ! [ -z ${1} ]; then
	folder="/${1}"
	act "opening folder ${folder}"
    fi

    switch_identity
    case $transport in
	ssl|tls) act "using secure connection (SSL)"
	    iproto="imaps" ;;
	plain) act "using clear text connection"
	    iproto="imap"  ;;
        *)
	    error "Unknown transport: $transport"
	    error "Configuration error in imap account ${account}"
	    return 1 ;;
    esac
    # escape at sign in login
    ilogin=`print $login | sed 's/@/\\@/'`

    { test $DRYRUN != 1 } && {

	ask_password $login $host
	{ test $? != 0 } && {
	    error "Error retrieving password for $login on $host"
	    unset password all; return 1
	}
	tmp=$TMPDIR/$host.peek.$RANDOM
	newlock $tmp
	cat <<EOF >> $tmp
set imap_pass = "${password}"
# set imap_peek = yes
EOF
	unset password
	print "source $tmp" >> $MUTTDIR/password
	(sleep 1;
	    cp /dev/null $MUTTDIR/password
	    cp /dev/null $tmp
	    unlink $tmp
	) &
	${=mutt} -F $MUTTDIR/rc	-f ${iproto}://${ilogin}@${host}${folder}

    } # DRYRUN
    return $?
}

later() {
    func "Saving message from stdin into remember"
    filename=$USER.${hostname}.$datestamp.$RANDOM
    # hostname was set by the main jaro routine
    func "Filename: $filename"

    { maildircheck ${MAILDIRS}/remember } || { maildirmake ${MAILDIRS}/remember }
    cat > ${MAILDIRS}/remember/new/$filename
}
