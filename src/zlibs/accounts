#!/usr/bin/env zsh
#
# Jaro Mail, your humble and faithful electronic postman
#
# a tool to easily and privately handle your e-mail communication
#
# Copyleft (C) 2010-2012 Denis Roio <jaromil@dyne.org>
#
# This source  code is free  software; you can redistribute  it and/or
# modify it under the terms of  the GNU Public License as published by
# the Free  Software Foundation; either  version 3 of the  License, or
# (at your option) any later version.
#
# This source code is distributed in  the hope that it will be useful,
# but  WITHOUT ANY  WARRANTY;  without even  the  implied warranty  of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# Please refer to the GNU Public License for more details.
#
# You should have received a copy of the GNU Public License along with
# this source code; if not, write to:
# Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.



switch_identity() {
    if [ "$name" != "" ]; then
	act "switch to identity: $name <$login>"
	rm -f $MUTTDIR/identity
	cat <<EOF > $MUTTDIR/identity
set hostname = $host
set realname = "$name"
set from = "$name <$login>"
EOF
    else
	error "No identity found, left blank."
	touch $MUTTDIR/identity
    fi
}

list_accounts() {
    for a in `find $WORKDIR/Accounts -type f | grep -v README | sed 's/.txt//'`; do
	act -n "`basename $a`\t :: "
	awk '
/^name/ { for(i=2;i<=NF;i++) printf "%s ", $i }
/^email/ { printf "<%s>", $2 }
/^host/ { printf " on %s", $2 }
{next}' $a.txt
	print " (`basename $a | cut -d. -f1`)"
    done
}

# arg 1 : account type, es: imap or smtp
# -a defines which account name other than 'default'
read_account() {
    typeset -al all
    unset name email host login transport \
	port auth cert options folders
    # parse arguments
    { test "$1" != "" } && { account=$1 }

    account=".${account}"
    type=`print ${account} | cut -d. -f2`
    account=`print ${account} | cut -d. -f3`

    { test "$2" != "" } && { account=$2 }

    { test "$type" = "default" } && {
	error "No account type specified"
	act "Available accounts (excluding symbolic links, omit final .txt):"
	list_accounts
	return 1 }
    { test "$account" = "" } && { account=default }

    # find the file
    func "read_account looking for ${type} ${account}"
    for a in `find $WORKDIR/Accounts -name "$type.$account*"`; do
	func "found account: $a"
	all+=($a)
    done
    if [ ${#all} = 0 ]; then
	error "No $type account found: $account"
	act "Refine your argument using '-a type.account'"
	act "For instance adding to the commandline: -a imap.default"
	act "Available accounts (excluding symbolic links, omit final .txt):"
	list_accounts
	return 1
    elif [ ${#all} != 1 ]; then
	error "Too many $type accounts named $account"
	act -n ""
	for i in ${=all}; do print -n "`basename ${i}` "; done
	print; error "Refine your account keyword using -a option"
	return 1
    fi

    acct=${all[1]}
    type=`basename $acct | cut -d. -f1`

    case $type in
	imap|smtp)

	    lock $acct
	    ttmp=`cat $acct | awk '
    /^#/ { next }
    /^name/ { printf "name=\""; for(i=2;i<=NF;i++) printf "%s ", $i; printf "\";" }
    /^email/ { printf "email=\"%s\";", $2 }
    /^host/ { printf "host=\"%s\";", $2 }
    /^login/ { printf "login=\"%s\";", $2 }
    /^transport/ { printf "transport=\"%s\";", $2 }
    /^port/ { printf "port=\"%s\";", $2 }
    /^auth/ { printf "auth=\"%s\";", $2 }
    /^cert/ { printf "cert=\"%s\";", $2 }
    /^options/ { printf "accountopt=\""; for(i=2;i<=NF;i++) printf "%s ", $i; printf "\";" }
    /^folders/ { printf "folders=\""; for(i=2;i<=NF;i++) printf "%s ", $i; printf "\";" }
    '`
	    unlock $acct

	    eval "$ttmp"
	    # check required fields
	    { test -z $host }  && { error "Field missing in account $acct: host"; return 1 }

	    # fill in defaults
	    { test -z $name }       && { name="$type" }
	    { test -z $login }      && { login="$email" } # usually email and login are the same
	    { test -z $email }      && { email="$login" } # so if one is specified, deduce the other
	    { test -z $transport }  && { transport=plain }
	    { test -z $port }       && { port=143 }
	    { test -z $auth }       && { auth=plain }
	    { test -z $cert }       && { cert=ignore }
	    { test -z $accountopt } && { accountopt=keep }
	    # cert and password can be missing

	    func "type: $type"
	    func "name: $name"
	    func "email: $email"
	    func "host: $host"
	    func "login: $login"
	    func "trans: $transport"
	    func "port: $port"
	    func "cert: $cert"
	    func "auth: $auth"
	    func "options: $accountopt"
	    func "folders: $folders"
	    ;;
	*)
	    error "Account type \"$type\" not recognized."
	    return 1
	    ;;
    esac
    return 0
}


# we use pinentry
# comes from gpg project and is secure
# it also conveniently uses the right toolkit
pin_entry() {
    	cat <<EOF | pinentry 2>/dev/null | awk '/^D / { sub(/^D /, ""); print }'
OPTION ttyname=$TTY
OPTION lc-ctype=$LANG
SETTITLE Type your password
SETDESC Type the password for $1 @ $2
SETPROMPT Password:
GETPIN
EOF
}


# retrieve a password for user @ domain
# put it in variable password
# up to the caller to unset it after use
ask_password() {
    func "Looking for password in keyring: $name"
    case $OS in
	MAC)
	    security find-internet-password \
		-c JARO -a $email -s $host \
		-p $transport -P $port > /dev/null
	    if [ $? != 0 ]; then # its a new password
		new_password
		{ test $? != 0 } && {
		    error "Password input aborted."
		    return 1 }
	    else
		password=`security find-internet-password -c JARO -a $email -s $host -p $transport -P $port -g 2>&1| awk '/^password:/ { print $2 }' | sed -e 's/"//g'`
	    fi
	    return 0
	    ;;
	#####################################
	GNU)
	    func "Looking for password in keyring: $name"
	    ###################
	    # USE GNOME KEYRING
	    { test $GNOMEKEY = 1 } && {
		print "protocol=${type}\npath=jaromail/${email}\nusername=${login}\nhost=${host}\n\n" \
		    | $WORKDIR/bin/jaro-gnome-keyring check
		if [ $? != 0 ]; then # its a new password
		    new_password
		    { test $? != 0 } && {
			error "Password input aborted."
			return 1 }
		else # password found into gnome keyring
		    act "Using saved password for $1 @ $2"
		    password=`print "protocol=${type}\npath=jaromail/${email}\nusername=${login}\nhost=${host}\n\n" | $WORKDIR/bin/jaro-gnome-keyring get`
		fi
		return 0
	    }
	    ####################
	    # USE PINENTRY ALONE
	    new_password
	    { test $? != 0 } && {
		error "Password input aborted."
		return 1 }
	    return 0
	    ;;
	*)
	    error "Unknown system, can't figure out how to handle passwords"
	    return 1
    esac
}

new_password() {
    notice "Setting a new password for $name"
    password=`pin_entry $login $host`
    res=0
    case $OS in
	MAC)
	    if [ "$password" != "" ]; then

		act -n "Old "
		security delete-internet-password \
		    -c JARO -a $email -s $host \
		    -p $transport -P $port > /dev/null

		security add-internet-password \
		    -c JARO -a $email -s $host \
		    -p $transport -P $port -w "${password}"

		if [ $? != 0 ]; then
		    error "Error adding password to keyring."
		else
		    act "New password saved in keyring"
		fi
		return 0

	    else
		act -n "Old "
		security delete-internet-password \
		    -c JARO -a $email -s $host \
		    -p $transport -P $port > /dev/null
		res=$?; unset password
		{ test $res != 0 } && {
		    echo
		    error "Error deleting password from keyring."
		    return 1 }
		act "No new password given, old password erased."
		return 0
	    fi
	    ;;
	GNU)
	    if [ "$password" != "" ]; then # password was written

		# USE GNOME KEYRING
		{ test $GNOMEKEY = 1 } && {

		    cat <<EOF | $WORKDIR/bin/jaro-gnome-keyring store
protocol=${type}
path=jaromail/${email}
username=${login}
host=${host}
password=${password}
EOF
		    { test $? != 0 } && { error "Error saving password in Gnome keyring" }
		    return 0
		}

		return 0

	    else # password is blank or aborted

		# USE GNOME KEYRING
		{ test $GNOMEKEY = 1 } && {

		    cat <<EOF | $WORKDIR/bin/jaro-gnome-keyring erase
protocol=${type}
path=jaromail/${email}
username=${login}
host=${host}
EOF
		    { test $? != 0 } && {
			error "Error accessing password in Gnome keyring"
			return 1 }
		    act "No new password given, old password erased."
		    return 0
		}

		return 1

	    fi
	    ;;
	*)
	    error "Unknown system, can't figure out how to handle passwords"
	    return 1
    esac
}

change_password() {

    read_account ${=PARAM}

    { test $? = 0 } && { test $DRYRUN != 1 } && {
	new_password }

}