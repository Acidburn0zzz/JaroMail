#!/usr/bin/env zsh
#
# Jaro Mail, your humble and faithful electronic postman
#
# a tool to easily and privately handle your e-mail communication
#
# Copyleft (C) 2010-2014 Denis Roio <jaromil@dyne.org>
#
# This source  code is free  software; you can redistribute  it and/or
# modify it under the terms of  the GNU Public License as published by
# the Free  Software Foundation; either  version 3 of the  License, or
# (at your option) any later version.
#
# This source code is distributed in  the hope that it will be useful,
# but  WITHOUT ANY  WARRANTY;  without even  the  implied warranty  of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# Please refer to the GNU Public License for more details.
#
# You should have received a copy of the GNU Public License along with
# this source code; if not, write to:
# Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.


list_accounts() {
    accts=`${=find} "$ACCOUNTS" -type f | grep -v README | sed 's/.txt//'`
    for a in ${(f)accts}; do
	act -n "`basename $a`\t :: "
	awk '
/^name/ { for(i=2;i<=NF;i++) printf "%s ", $i }
/^email/ { printf "<%s>", $2 }
/^host/ { printf " on %s", $2 }
{next}' "$a.txt"
	print " (`basename $a | cut -d. -f1`)"
    done
}

# arg 1 : account type, es: imap or smtp
# -a defines which account name other than 'default'
# results in the definition of global account variables:
# name login host protocol port auth folders accountopt
read_account() {
    typeset -al all
    unset name email host login transport \
	port auth cert options folders
    # parse arguments
    { test "$1" != "" } && { account="$1" }

    account=".${account}"
    type=`print ${account} | cut -d. -f2`
    account=`print ${account} | cut -d. -f3`

    { test "$2" != "" } && { account="$2" }

    { test "$type" = "default" } && {
	error "No account type specified"
	act "Available accounts (excluding symbolic links, omit final .txt):"
	list_accounts
	return 1 }
    { test "$account" = "" } && { account=default }

    # find the account
    func "read_account looking for ${type} ${account}"
    accountlist=`${=find} "$ACCOUNTS" -name "$type.$account*" | grep -v 'lock$' | grep -v 'pid$'`
    for a in ${(f)accountlist}; do
	# check if it is locked
	func "found account: $a"
	{ test -r "${a}.lock" } && {
	    pidcheck "${a}" }
	all+=("$a")
    done
    if [ ${#all} = 0 ]; then
	error "No $type account found: $account"
	act "Refine your argument using '-a type.account'"
	act "For instance adding to the commandline: -a imap.default"
	act "Available accounts (excluding symbolic links, omit final .txt):"
	list_accounts
	return 1
    elif [ ${#all} != 1 ]; then
	error "Too many $type accounts named $account"
	act -n ""
	for i in ${=all}; do print -n "`basename ${i}` "; done
	print; error "Refine your account keyword using -a option"
	return 1
    fi

    acct="${all[1]}"
    type=`basename "$acct" | cut -d. -f1`

    case $type in
	imap|smtp)

	    lock $acct
	    ttmp=`cat "$acct" | awk '
    /^#/ { next }
    /^name/ { printf "name=\""; for(i=2;i<=NF;i++) printf "%s ", $i; printf "\";" }
    /^email/ { printf "email=\"%s\";", $2 }
    /^host/ { printf "host=\"%s\";", $2 }
    /^login/ { printf "login=\"%s\";", $2 }
    /^transport/ { printf "transport=\"%s\";", $2 }
    /^port/ { printf "port=\"%s\";", $2 }
    /^auth/ { printf "auth=\"%s\";", $2 }
    /^cert/ { printf "cert=\"%s\";", $2 }
    /^options/ { printf "accountopt=\""; for(i=2;i<=NF;i++) printf "%s ", $i; printf "\";" }
    /^folders/ { printf "folders=\""; for(i=2;i<=NF;i++) printf "%s ", $i; printf "\";" }
    '`
	    unlock $acct

	    eval "$ttmp"
	    # check required fields
	    { test -z $host }  && { error "Field missing in account $acct: host"; return 1 }

	    # fill in defaults
	    { test -z $name }       && { name="$type" }
	    { test -z $login }      && { login="$email" } # usually email and login are the same
	    { test -z $email }      && { email="$login" } # so if one is specified, deduce the other
	    { test -z $transport }  && { transport=plain }
	    { test -z $port }       && { port=143 }
	    { test -z $auth }       && { auth=plain }
	    { test -z $cert }       && { cert=ignore }
	    { test -z $accountopt } && { accountopt=keep }
	    # cert and password can be missing

	    func "type: $type"
	    func "name: $name"
	    func "email: $email"
	    func "host: $host"
	    func "login: $login"
	    func "trans: $transport"
	    func "port: $port"
	    func "cert: $cert"
	    func "auth: $auth"
	    func "options: $accountopt"
	    func "folders: $folders"
	    ;;
	*)
	    error "Account type \"$type\" not recognized."
	    return 1
	    ;;
    esac
    return 0
}

