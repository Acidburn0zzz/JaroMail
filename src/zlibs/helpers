#!/usr/bin/env zsh
#
# Jaro Mail, your humble and faithful electronic postman
#
# a tool to easily and privately handle your e-mail communication
#
# Copyleft (C) 2010-2012 Denis Roio <jaromil@dyne.org>
#
# This source  code is free  software; you can redistribute  it and/or
# modify it under the terms of  the GNU Public License as published by
# the Free  Software Foundation; either  version 3 of the  License, or
# (at your option) any later version.
#
# This source code is distributed in  the hope that it will be useful,
# but  WITHOUT ANY  WARRANTY;  without even  the  implied warranty  of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# Please refer to the GNU Public License for more details.
#
# You should have received a copy of the GNU Public License along with
# this source code; if not, write to:
# Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

# start without options: auto
# read or compose depending if there is an argument that is an email
# or a folder to start with

autostart() {
# no argument passed. open known folder
    { test -z ${1} } && {

	{ test ! -r $MUTTDIR/rc } \
	    && { error "Jaro Mail is not yet configured."; return 1 }

	mutt -F $MUTTDIR/rc
	return $?
    }

    # argument passed: determine if an email
    echo "${1}" \
	| tr 'A-Z' 'a-z' \
	| grep '^[a-zA-Z0-9._%+-]*@[a-zA-Z0-9]*[\.[a-zA-Z0-9]*]*[a-zA-Z0-9]$' \
	> /dev/null
    { test $? = 0 } && {
	notice "Composing message to: ${1}"
	# its an email, TODO see if we have it in our addressbook
	mutt -F $MUTTDIR/rc "${1}"
	return 0
    }
    # or a path to folder
    { test -r ${1} } && {
	mutt -F $MUTTDIR/rc -f ${1}
	return 0
    }

    # or the name of a folder in Jaro Mail
    { test -r $MAILDIRS/${1} } && {
	notice "Opening folder ${1}"
	mutt -F $MUTTDIR/rc -f "$MAILDIRS/${1}"
	return 0
    }

    return $?
}


#########
## Editor
# this part guesses what is the best editor already present on the system
# of course we have a preference for AutOrg, the editor from our suite
# however the default is nano if nothing else is choosen.
editor() {
    { test ${EDITOR} } && {
	${=EDITOR} ${PARAM[1]}
	return $? }
    case $OS in
	MAC) open -t ${PARAM[1]} ;;
	GNU)
	    { which nano > /dev/null } && {
		nano -m -S -Q ">" -I -E -D -T 4 -U -W -c -i -k -r 72 ${PARAM[1]} }
	    error "No editor found, please configure the EDITOR environment variable."
	    sleep 3
	    ;;
    esac
    return $?
}

##############
## Open a File
open_file() {
    a=$WORKDIR/cache/attach-$RANDOM$RANDOM
    cp ${PARAM[1]} $a
    case $OS in
	GNU)
	    # TODO
	    ;;
	MAC)
	    open -g $a
	    ;;
    esac
}


# opens and closes a ramdisk for temporary files
# users can do this explicitly between session to speed up operations
ramdisk() {
    case $OS in
	GNU)
	    # TODO
	    # not so urgent, since usually /dev/shm is mounted and writable
	    ;;
	MAC)
	    case ${PARAM[1]} in
		open)
		    mount | grep 'JaroTmp' > /dev/null
		    { test $? = 0 } && {
			error "A Jaro Mail ramdisk is already open"
			return 1 }
		    { test -z ${PARAM[2]} } && { size=10 } || { size=${PARAM[2]} }
		    act "Creating ramdisk of ${size}MB"

		    # 2048 is a megabyte here
		    devsize=$((1024*2*$size))
		    devname=`hdid -nomount ram://${devsize}`
		    act "Mounting ramdisk on $devname"
		    diskutil eraseVolume HFS+ JaroTmp `basename $devname` > /dev/null
		    { test $? != 0 } && {
			error "Error initializing ramdisk"
			hdiutil detach `basename $devname`
			return 1 }
		    notice "Operation successful, ramdisk ready on /Volume/JaroTmp"
		    TMPRAM=1
		    ;;
		close)
		    devname=`mount | awk '/JaroTmp/ {print $1}'`
		    { test "$devname" = "" } && {
			error "No ramdisk seems to be open"
			return 1 }
		    act "Unmounting ramdisk: $devname"
		    diskutil unmount /Volumes/JaroTmp > /dev/null
		    hdiutil detach `basename $devname` > /dev/null
		    notice "Ramdisk succesfully detached"
		    TMPRAM=0
		    ;;
	    esac
	    ;;
    esac
}

human_size() {
    { test $1 -gt 0 } || {
	error "human_size() called with zero argument"
	return 1 }
    # megabytes
    { test $1 -gt 1048576 } && {
	print -n "$(( $1 / 1024 / 1024 )) MB"
	return 0}
    # kilobytes
    { test $1 -gt 1024 } && {
	print -n "$(( $1 / 1024 )) KB"
	return 0}
    # bytes
    print -n "$1 Bytes"
    return 0
}

######
# CERT
# downloads and/or installs certificates
cert() {

    act "Downloading all known certificates (needs Internet connectivity)"

#	gmail)
    cc=Equifax_Secure_Certificate_Authority
    if ! [ -r $WORKDIR/certs/${cc}.pem ]; then
	
	curl -o $WORKDIR/certs/${cc}.pem \
	    "https://www.geotrust.com/resources/root_certificates/certificates/${cc}.cer"
	openssl x509 -in \
	    $WORKDIR/certs/${cc}.pem -fingerprint \
	    -subject -issuer -serial -hash -noout
    fi
    notice "Google CA succesfully installed"

#	dyne|autistici|freaknet)
    cc=Autistici_Certificate_Authority
    if ! [ -r $WORKDIR/certs/${cc}.pem ]; then
	curl -o $WORKDIR/certs/${cc}.pem \
	    "http://ca.autistici.org/ca.pem"
	openssl x509 -in \
	    $WORKDIR/certs/${cc}.pem \
	    -fingerprint -subject -issuer -serial -hash -noout
    fi
    notice "Aut/Inv CA succesfully installed"

#	riseup)
    cc=RiseupCA
    if ! [ -r $WORKDIR/certs/${cc}.pem ]; then
	curl -o $WORKDIR/certs/${cc}.pem "https://help.riseup.net/assets/43052/RiseupCA.pem"
	openssl x509 -in \
	    $WORKDIR/certs/${cc}.pem \
	    -fingerprint -subject -issuer -serial -hash -noout
    fi
    notice "Riseup CA succesfully installed"

    act "refreshing certificates"
    c_rehash $WORKDIR/certs > /dev/null
    if [ $? != 0 ]; then
	error "Error refreshing certificates in $WORKDIR/certs"
	c_rehash $WORKDIR/certs
    fi
    notice "Done importing most common certificates."
    return 0
}

######################
